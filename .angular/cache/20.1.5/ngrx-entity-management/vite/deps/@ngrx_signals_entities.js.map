{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ngrx/signals/fesm2022/ngrx-signals-entities.mjs"],
  "sourcesContent": ["import { computed } from '@angular/core';\nimport { signalStoreFeature, withState, withComputed } from '@ngrx/signals';\n\nvar DidMutate;\n(function (DidMutate) {\n    DidMutate[DidMutate[\"None\"] = 0] = \"None\";\n    DidMutate[DidMutate[\"Entities\"] = 1] = \"Entities\";\n    DidMutate[DidMutate[\"Both\"] = 2] = \"Both\";\n})(DidMutate || (DidMutate = {}));\n\nconst defaultSelectId = (entity) => entity.id;\nfunction getEntityIdSelector(config) {\n    return config?.selectId ?? defaultSelectId;\n}\nfunction getEntityStateKeys(config) {\n    const collection = config?.collection;\n    const entityMapKey = collection === undefined ? 'entityMap' : `${collection}EntityMap`;\n    const idsKey = collection === undefined ? 'ids' : `${collection}Ids`;\n    const entitiesKey = collection === undefined ? 'entities' : `${collection}Entities`;\n    return { entityMapKey, idsKey, entitiesKey };\n}\nfunction cloneEntityState(state, stateKeys) {\n    return {\n        entityMap: { ...state[stateKeys.entityMapKey] },\n        ids: [...state[stateKeys.idsKey]],\n    };\n}\nfunction getEntityUpdaterResult(state, stateKeys, didMutate) {\n    switch (didMutate) {\n        case DidMutate.Both: {\n            return {\n                [stateKeys.entityMapKey]: state.entityMap,\n                [stateKeys.idsKey]: state.ids,\n            };\n        }\n        case DidMutate.Entities: {\n            return { [stateKeys.entityMapKey]: state.entityMap };\n        }\n        default: {\n            return {};\n        }\n    }\n}\nfunction addEntityMutably(state, entity, selectId, prepend = false) {\n    const id = selectId(entity);\n    if (state.entityMap[id]) {\n        return DidMutate.None;\n    }\n    state.entityMap[id] = entity;\n    if (prepend) {\n        state.ids.unshift(id);\n    }\n    else {\n        state.ids.push(id);\n    }\n    return DidMutate.Both;\n}\nfunction addEntitiesMutably(state, entities, selectId, prepend = false) {\n    let didMutate = DidMutate.None;\n    for (const entity of entities) {\n        const result = addEntityMutably(state, entity, selectId, prepend);\n        if (result === DidMutate.Both) {\n            didMutate = result;\n        }\n    }\n    return didMutate;\n}\nfunction setEntityMutably(state, entity, selectId, replace = true) {\n    const id = selectId(entity);\n    if (state.entityMap[id]) {\n        state.entityMap[id] = replace\n            ? entity\n            : { ...state.entityMap[id], ...entity };\n        return DidMutate.Entities;\n    }\n    state.entityMap[id] = entity;\n    state.ids.push(id);\n    return DidMutate.Both;\n}\nfunction setEntitiesMutably(state, entities, selectId, replace = true) {\n    let didMutate = DidMutate.None;\n    for (const entity of entities) {\n        const result = setEntityMutably(state, entity, selectId, replace);\n        if (didMutate === DidMutate.Both) {\n            continue;\n        }\n        didMutate = result;\n    }\n    return didMutate;\n}\nfunction removeEntitiesMutably(state, idsOrPredicate) {\n    const ids = Array.isArray(idsOrPredicate)\n        ? idsOrPredicate\n        : state.ids.filter((id) => idsOrPredicate(state.entityMap[id]));\n    let didMutate = DidMutate.None;\n    for (const id of ids) {\n        if (state.entityMap[id]) {\n            delete state.entityMap[id];\n            didMutate = DidMutate.Both;\n        }\n    }\n    if (didMutate === DidMutate.Both) {\n        state.ids = state.ids.filter((id) => id in state.entityMap);\n    }\n    return didMutate;\n}\nfunction updateEntitiesMutably(state, idsOrPredicate, changes, selectId) {\n    const ids = Array.isArray(idsOrPredicate)\n        ? idsOrPredicate\n        : state.ids.filter((id) => idsOrPredicate(state.entityMap[id]));\n    let newIds = undefined;\n    let didMutate = DidMutate.None;\n    for (const id of ids) {\n        const entity = state.entityMap[id];\n        if (entity) {\n            const changesRecord = typeof changes === 'function' ? changes(entity) : changes;\n            state.entityMap[id] = { ...entity, ...changesRecord };\n            didMutate = DidMutate.Entities;\n            const newId = selectId(state.entityMap[id]);\n            if (newId !== id) {\n                state.entityMap[newId] = state.entityMap[id];\n                delete state.entityMap[id];\n                newIds = newIds || {};\n                newIds[id] = newId;\n            }\n        }\n    }\n    if (newIds) {\n        state.ids = state.ids.map((id) => newIds[id] ?? id);\n        didMutate = DidMutate.Both;\n    }\n    if (typeof ngDevMode !== 'undefined' &&\n        ngDevMode &&\n        state.ids.length !== Object.keys(state.entityMap).length) {\n        console.warn('@ngrx/signals/entities: Entities with IDs:', ids, 'are not updated correctly.', 'Make sure to apply valid changes when using `updateEntity`,', '`updateEntities`, and `updateAllEntities` updaters.');\n    }\n    return didMutate;\n}\n\nfunction addEntity(entity, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = addEntityMutably(clonedState, entity, selectId);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction addEntities(entities, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = addEntitiesMutably(clonedState, entities, selectId);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction prependEntity(entity, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = addEntityMutably(clonedState, entity, selectId, true);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction prependEntities(entities, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const uniqueEntities = [];\n        const seenIds = new Set();\n        for (const entity of entities) {\n            const id = selectId(entity);\n            if (!seenIds.has(id)) {\n                uniqueEntities.unshift(entity);\n                seenIds.add(id);\n            }\n        }\n        const didMutate = addEntitiesMutably(clonedState, uniqueEntities, selectId, true);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction removeEntity(id, config) {\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = removeEntitiesMutably(clonedState, [id]);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction removeEntities(idsOrPredicate, config) {\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = removeEntitiesMutably(clonedState, idsOrPredicate);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction removeAllEntities(config) {\n    const stateKeys = getEntityStateKeys(config);\n    return () => ({\n        [stateKeys.entityMapKey]: {},\n        [stateKeys.idsKey]: [],\n    });\n}\n\nfunction setEntity(entity, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = setEntityMutably(clonedState, entity, selectId);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction setEntities(entities, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = setEntitiesMutably(clonedState, entities, selectId);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction setAllEntities(entities, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return () => {\n        const state = { entityMap: {}, ids: [] };\n        setEntitiesMutably(state, entities, selectId);\n        return {\n            [stateKeys.entityMapKey]: state.entityMap,\n            [stateKeys.idsKey]: state.ids,\n        };\n    };\n}\n\nfunction updateEntity(update, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = updateEntitiesMutably(clonedState, [update.id], update.changes, selectId);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction updateEntities(update, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    const idsOrPredicate = 'ids' in update ? update.ids : update.predicate;\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = updateEntitiesMutably(clonedState, idsOrPredicate, update.changes, selectId);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction updateAllEntities(changes, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = updateEntitiesMutably(clonedState, state[stateKeys.idsKey], changes, selectId);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction upsertEntity(entity, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = setEntityMutably(clonedState, entity, selectId, false);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction upsertEntities(entities, config) {\n    const selectId = getEntityIdSelector(config);\n    const stateKeys = getEntityStateKeys(config);\n    return (state) => {\n        const clonedState = cloneEntityState(state, stateKeys);\n        const didMutate = setEntitiesMutably(clonedState, entities, selectId, false);\n        return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n    };\n}\n\nfunction entityConfig(config) {\n    return config;\n}\n\nfunction withEntities(config) {\n    const { entityMapKey, idsKey, entitiesKey } = getEntityStateKeys(config);\n    return signalStoreFeature(withState({\n        [entityMapKey]: {},\n        [idsKey]: [],\n    }), withComputed((store) => ({\n        [entitiesKey]: computed(() => {\n            const entityMap = store[entityMapKey]();\n            const ids = store[idsKey]();\n            return ids.map((id) => entityMap[id]);\n        }),\n    })));\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { addEntities, addEntity, entityConfig, prependEntities, prependEntity, removeAllEntities, removeEntities, removeEntity, setAllEntities, setEntities, setEntity, updateAllEntities, updateEntities, updateEntity, upsertEntities, upsertEntity, withEntities };\n\n"],
  "mappings": "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",
  "names": ["DidMutate"]
}
